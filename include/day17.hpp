#ifndef INCLUDE_DAY17_HPP_
#define INCLUDE_DAY17_HPP_

#include<iostream>
#include<string>
#include<cstdint>
#include<fstream>
#include<vector>
#include<map>
#include<queue>
#include<memory>

using namespace std;

struct day17{

	struct computer{

			computer(std::vector<int64_t> ins){
				instructions=ins;
				IP=0;
				COUT=0;
				RELATIVE_BASE=0;
				done=false;
				line.emplace_back();
				}


			uint64_t executeProgram(){
				while(IP<=instructions.size())
				{
					int64_t op=instructions[IP]%100;
					int64_t mode1=(instructions[IP]/100)%10;
					int64_t mode2=(instructions[IP]/1000)%10;
					int64_t mode3=(instructions[IP]/10000)%10;
					uint32_t ipInc=instructionIncrements().at(op);

					switch(op)
					{
						case 99:
							done=true;
							return 1;
						case 1:
							decodeAccess(mode3,IP+3)=decodeAccess(mode1,IP+1)+decodeAccess(mode2,IP+2);
							break;
						case 2:
							decodeAccess(mode3,IP+3)=decodeAccess(mode1,IP+1)*decodeAccess(mode2,IP+2);
							break;
						case 3:
							if(!read(decodeAccess(mode1,IP+1)))
								return 0;
							break;
						case 4:
							write(decodeAccess(mode1,IP+1));
							ipInc=2;
							break;
						case 5:
							if(decodeAccess(mode1,IP+1))
							{
								IP=decodeAccess(mode2,IP+2);
								ipInc=0;
							}
							break;
						case 6:
							if(!decodeAccess(mode1,IP+1))
							{
								IP=decodeAccess(mode2,IP+2);
								ipInc=0;
							}
							break;
						case 7:
							decodeAccess(mode3,IP+3)=(decodeAccess(mode1,IP+1)<decodeAccess(mode2,IP+2))?1:0;
							break;
						case 8:
							decodeAccess(mode3,IP+3)=(decodeAccess(mode1,IP+1)==decodeAccess(mode2,IP+2))?1:0;
							break;
						case 9:
							RELATIVE_BASE+=decodeAccess(mode1,IP+1);
							break;
						default:
							throw ("Illegal instruction "+std::to_string(instructions[IP])+" at index "+std::to_string(IP));
					}
					IP+=ipInc;
				}

				throw ("Memory corruption program finished without halt");
			}

			int64_t& decodeAccess(int8_t mode,int64_t index)
			{
				if(index>=(int64_t)instructions.size())
					instructions.resize(instructions.size()*8,0);

				if(mode==1)
					return instructions[index];
				else if(mode==2)
				{
					if(instructions[index]+RELATIVE_BASE>=(int64_t)instructions.size())
						instructions.resize(instructions.size()*8,0);
					return instructions[instructions[index]+RELATIVE_BASE];
				}
				else
				{
					if(instructions[index]>=(int64_t)instructions.size())
							instructions.resize(instructions.size()*8,0);
					return instructions[instructions[index]];
				}
			}

			bool read(int64_t& tgt){


				if(IN.size())
				{
					tgt=IN.front();
					IN.pop();
					return true;
				}
				return false;
			}

			void write(int64_t out){
				if(COUT)
					COUT->IN.push(out);

				if(out=='\n')
					line.emplace_back();
				else
					line.back().push_back((char)out);
				OUT.push_back(out);

			}

			const std::map<uint8_t,uint8_t> instructionIncrements(){
				static std::map<uint8_t,uint8_t> ii={{1,4},{2,4},{3,2},{4,2},{5,3},{6,3},{7,4},{8,4},{9,2},{99,0}};
				return ii;
			}

			unique_ptr<computer> COUT;
			bool done;
			uint64_t IP;
			int64_t RELATIVE_BASE;
			vector<int64_t> OUT;
			queue<int64_t> IN;
			vector<int64_t> instructions;
			vector<vector<char>> line;

		};

	day17(const string& filename){
		inst={1,330,331,332,109,3762,1101,1182,0,16,1101,0,1467,24,101,0,0,570,1006,570,36,101,0,571,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1467,570,1006,570,14,21102,58,1,0,1105,1,786,1006,332,62,99,21101,0,333,1,21102,1,73,0,1106,0,579,1101,0,0,572,1102,1,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,102,1,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21101,0,340,1,1106,0,177,21102,477,1,1,1105,1,177,21101,0,514,1,21102,1,176,0,1106,0,579,99,21102,1,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,101,0,572,1182,21101,0,375,1,21102,1,211,0,1106,0,579,21101,1182,11,1,21101,0,222,0,1106,0,979,21102,388,1,1,21101,0,233,0,1105,1,579,21101,1182,22,1,21102,1,244,0,1105,1,979,21101,401,0,1,21101,0,255,0,1105,1,579,21101,1182,33,1,21101,266,0,0,1105,1,979,21101,0,414,1,21101,277,0,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,1182,0,1,21102,1,313,0,1105,1,622,1005,575,327,1101,0,1,575,21102,1,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,0,8,0,109,4,2102,1,-3,587,20102,1,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,1201,-4,0,630,20102,1,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20101,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,702,1,0,1105,1,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1106,0,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,0,756,0,1105,1,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2105,1,0,109,7,1005,575,802,20101,0,576,-6,20101,0,577,-5,1106,0,814,21102,0,1,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,45,-3,22201,-6,-3,-3,22101,1467,-3,-3,1202,-3,1,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1106,0,924,1205,-2,873,21101,35,0,-4,1106,0,924,1201,-3,0,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1102,1,2,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,921,21002,0,1,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,45,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,51,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21101,973,0,0,1105,1,786,99,109,-7,2106,0,0,109,6,21102,1,0,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21101,-4,0,-2,1106,0,1041,21101,0,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2101,0,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2101,0,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,0,439,1,1106,0,1150,21102,1,477,1,1106,0,1150,21102,514,1,1,21102,1149,1,0,1105,1,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,2101,0,-4,0,109,-6,2105,1,0,12,13,32,1,11,1,32,1,5,9,30,1,5,1,5,1,1,1,30,1,5,1,5,1,1,1,30,1,5,1,5,1,1,1,30,1,5,1,5,1,1,1,30,1,5,1,5,1,1,1,18,13,5,7,1,1,44,1,44,1,44,1,44,1,1,1,42,1,1,1,42,9,38,1,5,1,38,1,5,1,38,1,5,1,38,1,5,1,38,1,5,1,36,7,1,1,36,1,1,1,3,1,1,1,36,1,1,1,3,1,1,1,36,1,1,1,3,1,1,1,36,1,1,9,34,1,5,1,1,1,1,1,34,9,1,1,40,1,3,1,32,9,3,1,32,1,11,1,32,1,11,1,1,7,24,1,11,1,1,1,5,1,16,5,3,1,11,1,1,1,5,1,16,1,3,1,3,1,11,1,1,1,5,1,16,1,3,1,3,1,9,9,1,1,16,1,3,1,3,1,9,1,1,1,1,1,3,1,1,1,16,9,9,1,1,9,20,1,13,1,3,1,3,1,22,1,13,1,3,5,22,1,13,1,30,9,5,1,38,1,5,1,36,9,36,1,1,1,40,9,36,1,1,1,1,1,3,1,36,1,1,1,1,1,3,1,36,1,1,1,1,1,3,1,36,5,3,1,38,1,5,1,38,7,12};
	}

	void getResult(){
		computer c(inst);
		vector<vector<char>>& line=c.line;

		c.executeProgram();
		int acum=0;
		while(line.back().size()==0)
			line.pop_back();
		for(unsigned y=1;y<line.size()-1;y++)
			for(unsigned x=1;x<line[y].size()-1;x++)
			{
				if(line[y][x]=='#'){
					if(line[y+1][x]=='#'&&line[y-1][x]=='#'&&line[y][x+1]=='#'&&line[y][x-1]=='#')
					{
						acum+=y*x;
					}
				}

			}
		cout<<"Part 1:"<<acum<<endl;
	}

	void getResult2(){
		computer c(inst);
		c.instructions[0]=2;
		for(auto&cc:string("A,B,A,B,C,C,B,C,B,A\n"))
			c.IN.push(cc);
		for(auto&cc:string("R,12,L,8,R,12\n"))
				c.IN.push(cc);
		for(auto&cc:string("R,8,R,6,R,6,R,8\n"))
				c.IN.push(cc);
		for(auto&cc:string("R,8,L,8,R,8,R,4,R,4\n"))
				c.IN.push(cc);
		for(auto&cc:string("y\n"))
				c.IN.push(cc);
		c.executeProgram();

		cout<<"Part 2:"<<c.OUT.back()<<endl;



	}

	vector<int64_t> inst;

};


#endif
